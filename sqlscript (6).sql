REM   Script: Session 04
REM   GGG

CREATE TABLE Department (  
    DepartmentId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    DepartmentName VARCHAR2(100) NOT NULL  
) ;

CREATE TABLE Room (  
    RoomId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    DepartmentId NUMBER,  
    RoomType VARCHAR2(50),  
    Capacity NUMBER,  
    FOREIGN KEY (DepartmentId) REFERENCES Department(DepartmentId)  
) ;

CREATE TABLE Employee (  
    EmployeeId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    EmployeeName VARCHAR2(100),  
    EmployeeSurname VARCHAR2(100),  
    Role VARCHAR2(50),  
    DepartmentId NUMBER,  
    FOREIGN KEY (DepartmentId) REFERENCES Department(DepartmentId)  
) ;

CREATE TABLE Doctor (  
    DoctorId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    DoctorName VARCHAR2(100),  
    DoctorSurname VARCHAR2(100),  
    Specialty VARCHAR2(100),  
    EmployeeId NUMBER,  
    DoctorPhone VARCHAR2(15),  
    FOREIGN KEY (EmployeeId) REFERENCES Employee(EmployeeId)  
) ;

CREATE TABLE Patient (  
    PatientId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    PatientName VARCHAR2(100),  
    PatientSurname VARCHAR2(100),  
    Identification_Number VARCHAR2(20),  
    Contact_number VARCHAR2(15),  
    EmergencyContact VARCHAR2(15),  
    Address VARCHAR2(255),  
    Birth_Date DATE,  
    Gender VARCHAR2(10),  
    Blood_Type VARCHAR2(5)  
) ;

CREATE TABLE Insurance (  
    InsuranceId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    PolicyId NUMBER,  
    InsuranceName VARCHAR2(100),  
    PatientId NUMBER,  
    CoverageLimit VARCHAR2(50),  
    PolicyEndDate DATE,  
    CoverageType VARCHAR2(50),  
    FOREIGN KEY (PatientId) REFERENCES Patient(PatientId)  
) ;

CREATE TABLE TestReport (  
    ReportId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    ReportDetails CLOB, 
    PatientId NUMBER, 
    FOREIGN KEY (PatientId) REFERENCES Patient(PatientId) 
) ;

CREATE TABLE Prescription (  
    PrescriptionId NUMBER PRIMARY KEY,  
    Field VARCHAR2(100),  
    DrugDetails VARCHAR2(255),  
    PrescriptionDate DATE, 
    PatientId NUMBER, 
    FOREIGN KEY (PatientId) REFERENCES Patient(PatientId) 
) ;

CREATE TABLE Bill (  
    BillId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    InsuranceId NUMBER,  
    FinalBill NUMBER(10, 2),  
    PaymentStatus VARCHAR2(50),  
    PaymentDate DATE,  
    PatientId NUMBER, 
    FOREIGN KEY (PatientId) REFERENCES Patient(PatientId), 
    FOREIGN KEY (InsuranceId) REFERENCES Insurance(InsuranceId)  
) ;

CREATE TABLE Discharge (  
    DischargeId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    DischargeDate DATE,  
    DischargeReason VARCHAR2(255),  
    BillId NUMBER, 
    PatientId NUMBER, 
    FOREIGN KEY (BillId) REFERENCES Bill(BillId), 
    FOREIGN KEY (PatientId) REFERENCES Patient(PatientId) 
) ;

CREATE TABLE Records (  
    RecordId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    DoctorId NUMBER,  
    RoomId NUMBER, 
    RecordDetails VARCHAR2(255), 
    FOREIGN KEY (DoctorId) REFERENCES Doctor(DoctorId), 
    FOREIGN KEY (RoomId) REFERENCES Room(RoomId) 
) ;

CREATE TABLE Appointment (  
    AppointmentId NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,  
    PatientId NUMBER,  
    AppointmentDate DATE,  
    AppointmentTime TIMESTAMP,  
    DepartmentId NUMBER,  
    FOREIGN KEY (PatientId) REFERENCES Patient(PatientId),  
    FOREIGN KEY (DepartmentId) REFERENCES Department(DepartmentId)  
) ;

CREATE  
OR REPLACE PACKAGE Hospital_Management_Pkg AS  
 
PROCEDURE Insert_Department(  
    p_department_name IN VARCHAR2  
);  
  
PROCEDURE Update_Department(  
    p_department_id IN NUMBER,  
    p_department_name IN VARCHAR2  
);  
  
PROCEDURE Delete_Department(p_department_id IN NUMBER);  
  
PROCEDURE Insert_Room(  
    p_department_id IN NUMBER,  
    p_room_type IN VARCHAR2,  
    p_capacity IN NUMBER  
);  
  
PROCEDURE Update_Room(  
    p_room_id IN NUMBER,  
    p_department_id IN NUMBER,  
    p_room_type IN VARCHAR2,  
    p_capacity IN NUMBER  
);  
  
PROCEDURE Delete_Room(p_room_id IN NUMBER);  
  
PROCEDURE Insert_Employee(  
    p_employee_name IN VARCHAR2,  
    p_employee_surname IN VARCHAR2,  
    p_role IN VARCHAR2,  
    p_department_id IN NUMBER  
);  
  
PROCEDURE Update_Employee(  
    p_employee_id IN NUMBER,  
    p_employee_name IN VARCHAR2,  
    p_employee_surname IN VARCHAR2,  
    p_role IN VARCHAR2,  
    p_department_id IN NUMBER  
);  
  
PROCEDURE Delete_Employee(p_employee_id IN NUMBER);  
  
PROCEDURE Insert_Doctor(  
    p_doctor_name IN VARCHAR2,  
    p_doctor_surname IN VARCHAR2,  
    p_specialty IN VARCHAR2,  
    p_doctor_phone IN VARCHAR2,  
    p_employee_id IN NUMBER  
);  
  
PROCEDURE Update_Doctor(  
    p_doctor_id IN NUMBER,  
    p_doctor_name IN VARCHAR2,  
    p_doctor_surname IN VARCHAR2,  
    p_specialty IN VARCHAR2,  
    p_doctor_phone IN VARCHAR2,  
    p_employee_id IN NUMBER  
);  
  
PROCEDURE Delete_Doctor(p_doctor_id IN NUMBER);  
  
PROCEDURE Insert_Patient(  
    p_patient_name IN VARCHAR2,  
    p_patient_surname IN VARCHAR2,  
    p_identification_number IN VARCHAR2,  
    p_contact_number IN VARCHAR2,  
    p_emergency_contact IN VARCHAR2,  
    p_address IN VARCHAR2,  
    p_birth_date IN DATE,  
    p_gender IN VARCHAR2,  
    p_blood_type IN VARCHAR2  
);  
  
PROCEDURE Update_Patient(  
    p_patient_id IN NUMBER,  
    p_patient_name IN VARCHAR2,  
    p_patient_surname IN VARCHAR2,  
    p_identification_number IN VARCHAR2,  
    p_contact_number IN VARCHAR2,  
    p_emergency_contact IN VARCHAR2,  
    p_address IN VARCHAR2,  
    p_birth_date IN DATE,  
    p_gender IN VARCHAR2,  
    p_blood_type IN VARCHAR2  
);  
  
PROCEDURE Delete_Patient(p_patient_id IN NUMBER);  
  
PROCEDURE Insert_Insurance(  
    p_policy_id IN VARCHAR2,  
    p_insurance_name IN VARCHAR2,  
    p_patient_id IN NUMBER,  
    p_coverage_limit IN NUMBER,  
    p_policy_end_date IN DATE,  
    p_coverage_type IN VARCHAR2 
); 
 
PROCEDURE Update_Insurance(  
    p_insurance_id IN NUMBER,  
    p_policy_id IN VARCHAR2,  
    p_insurance_name IN VARCHAR2,  
    p_patient_id IN NUMBER,  
    p_coverage_limit IN NUMBER,  
    p_policy_end_date IN DATE,  
    p_coverage_type IN VARCHAR2 
); 
 
PROCEDURE Delete_Insurance(p_insurance_id IN NUMBER);  
  
PROCEDURE Insert_TestReport(  
    p_report_details IN VARCHAR2, 
    p_patient_id IN NUMBER 
);  
  
PROCEDURE Update_TestReport(  
    p_report_id IN NUMBER,  
    p_report_details IN VARCHAR2, 
    p_patient_id IN NUMBER 
);  
  
PROCEDURE Delete_TestReport(p_report_id IN NUMBER);  
  
PROCEDURE Insert_Prescription(  
    p_field IN VARCHAR2,  
    p_drugdetails IN VARCHAR2,  
    p_prescription_date IN DATE, 
    p_patient_id IN NUMBER 
);  
  
PROCEDURE Update_Prescription(  
    p_prescription_id IN NUMBER,  
    p_field IN VARCHAR2,  
    p_drugdetails IN VARCHAR2,  
    p_prescription_date IN DATE, 
    p_patient_id IN NUMBER 
);  
  
PROCEDURE Delete_Prescription(p_prescription_id IN NUMBER);  
  
PROCEDURE Insert_Discharge(  
    p_discharge_date IN DATE,  
    p_discharge_reason IN VARCHAR2,  
    p_bill_id IN NUMBER,  
    p_patient_id IN NUMBER 
);  
  
PROCEDURE Update_Discharge(  
    p_discharge_id IN NUMBER,  
    p_discharge_date IN DATE,  
    p_discharge_reason IN VARCHAR2,  
    p_bill_id IN NUMBER,  
    p_patient_id IN NUMBER 
);  
  
PROCEDURE Delete_Discharge(p_discharge_id IN NUMBER);  
  
PROCEDURE Insert_Bill(  
    p_insurance_id IN NUMBER,  
    p_final_bill IN NUMBER,  
    p_payment_status IN VARCHAR2,  
    p_payment_date IN DATE, 
    p_patient_id IN NUMBER 
);  
  
PROCEDURE Update_Bill(  
    p_bill_id IN NUMBER,  
    p_insurance_id IN NUMBER,  
    p_final_bill IN NUMBER,  
    p_payment_status IN VARCHAR2,  
    p_payment_date IN DATE, 
    p_patient_id IN NUMBER 
);  
  
PROCEDURE Delete_Bill(p_bill_id IN NUMBER);  
  
PROCEDURE Insert_Record(  
    p_doctor_id IN NUMBER, 
    p_room_id IN NUMBER, 
    p_record_details IN VARCHAR2 
);  
  
PROCEDURE Update_Record(  
    p_record_id IN NUMBER,  
    p_doctor_id IN NUMBER, 
    p_room_id IN NUMBER, 
    p_record_details IN VARCHAR2 
);  
  
PROCEDURE Delete_Record(p_record_id IN NUMBER);  
  
PROCEDURE Insert_Appointment(  
    p_patient_id IN NUMBER,  
    p_appointment_date IN DATE,  
    p_appointment_time IN TIMESTAMP,  
    p_department_id IN NUMBER  
);  
  
PROCEDURE Update_Appointment(  
    p_appointment_id IN NUMBER,  
    p_patient_id IN NUMBER,  
    p_appointment_date IN DATE,  
    p_appointment_time IN TIMESTAMP,  
    p_department_id IN NUMBER  
);  
  
PROCEDURE Delete_Appointment(p_appointment_id IN NUMBER);  
  
END Hospital_Management_Pkg;  
  
/

CREATE OR REPLACE PACKAGE BODY Hospital_Management_Pkg AS   
  
PROCEDURE Insert_Department(  
    p_department_name IN VARCHAR2  
) IS   
BEGIN  
    INSERT INTO Department (DepartmentName)  
    VALUES (p_department_name);  
END Insert_Department;  
  
PROCEDURE Update_Department(  
    p_department_id IN NUMBER,  
    p_department_name IN VARCHAR2  
) IS   
BEGIN  
    UPDATE Department  
    SET DepartmentName = p_department_name  
    WHERE DepartmentId = p_department_id;  
END Update_Department;  
  
PROCEDURE Delete_Department(  
    p_department_id IN NUMBER  
) IS   
BEGIN  
    DELETE FROM Department  
    WHERE DepartmentId = p_department_id;  
END Delete_Department;  
  
  
PROCEDURE Insert_Room(  
    p_department_id IN NUMBER,  
    p_room_type IN VARCHAR2,  
    p_capacity IN NUMBER  
) IS BEGIN  
INSERT INTO  
    Room (DepartmentId, RoomType, Capacity)  
VALUES  
    (  
        p_department_id,  
        p_room_type,  
        p_capacity  
    );  
  
END Insert_Room;  
  
PROCEDURE Update_Room(  
    p_room_id IN NUMBER,  
    p_department_id IN NUMBER,  
    p_room_type IN VARCHAR2,  
    p_capacity IN NUMBER  
) IS BEGIN  
UPDATE  
    Room  
SET  
    DepartmentId = p_department_id,  
    RoomType = p_room_type,  
    Capacity = p_capacity  
WHERE  
    RoomId = p_room_id;  
  
END Update_Room;  
  
PROCEDURE Delete_Room(p_room_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Room  
WHERE  
    RoomId = p_room_id;  
  
END Delete_Room;  
  
PROCEDURE Insert_Employee(  
    p_employee_name IN VARCHAR2,  
    p_employee_surname IN VARCHAR2,  
    p_role IN VARCHAR2,  
    p_department_id IN NUMBER  
) IS BEGIN  
INSERT INTO  
    Employee (  
        EmployeeName,  
        EmployeeSurname,  
        Role,  
        DepartmentId  
    )  
VALUES  
    (  
        p_employee_name,   
        p_employee_surname,  
        p_role,  
        p_department_id  
    );  
  
END Insert_Employee;  
  
PROCEDURE Update_Employee(  
    p_employee_id IN NUMBER,  
    p_employee_name IN VARCHAR2,  
    p_employee_surname IN VARCHAR2,  
    p_role IN VARCHAR2,  
    p_department_id IN NUMBER  
) IS BEGIN  
UPDATE  
    Employee  
SET  
    EmployeeName = p_employee_name,  
    EmployeeSurname = p_employee_surname,  
    Role = p_role,  
    DepartmentId = p_department_id  
WHERE  
    EmployeeId = p_employee_id;  
  
END Update_Employee;  
  
PROCEDURE Delete_Employee(p_employee_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Employee  
WHERE  
    EmployeeId = p_employee_id;  
  
END Delete_Employee;  
  
PROCEDURE Insert_Doctor(  
    p_doctor_name IN VARCHAR2,  
    p_doctor_surname IN VARCHAR2,  
    p_specialty IN VARCHAR2,  
    p_doctor_phone IN VARCHAR2,  
    p_employee_id IN NUMBER  
) IS BEGIN  
INSERT INTO  
    Doctor (  
        DoctorName,  
        DoctorSurname,  
        Specialty,  
        DoctorPhone,  
        EmployeeId  
    )  
VALUES  
    (  
        p_doctor_name,  
        p_doctor_surname,  
        p_specialty,  
        p_doctor_phone,  
        p_employee_id  
    );  
  
END Insert_Doctor;  
  
PROCEDURE Update_Doctor(  
    p_doctor_id IN NUMBER,  
    p_doctor_name IN VARCHAR2,  
    p_doctor_surname IN VARCHAR2,  
    p_specialty IN VARCHAR2,  
    p_doctor_phone IN VARCHAR2,  
    p_employee_id IN NUMBER  
) IS   
BEGIN  
    UPDATE Doctor  
    SET  
        DoctorName = p_doctor_name,  
        DoctorSurname = p_doctor_surname,  
        Specialty = p_specialty,  
        DoctorPhone = p_doctor_phone,  
        EmployeeId = p_employee_id  
    WHERE  
        DoctorId = p_doctor_id;  
END Update_Doctor;  
  
  
PROCEDURE Delete_Doctor(p_doctor_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Doctor  
WHERE  
    DoctorId = p_doctor_id;  
  
END Delete_Doctor;  
  
PROCEDURE Insert_Patient(  
    p_patient_name IN VARCHAR2,  
    p_patient_surname IN VARCHAR2,  
    p_identification_number IN VARCHAR2,  
    p_contact_number IN VARCHAR2,  
    p_emergency_contact IN VARCHAR2,  
    p_address IN VARCHAR2,  
    p_birth_date IN DATE,  
    p_gender IN VARCHAR2,  
    p_blood_type IN VARCHAR2  
) IS BEGIN  
INSERT INTO  
    Patient (  
        PatientName,  
        PatientSurname,  
        Identification_Number,  
        Contact_Number,  
        EmergencyContact,  
        Address,  
        Birth_Date,  
        Gender,  
        Blood_Type  
    )  
VALUES  
    (  
        p_patient_name,  
        p_patient_surname,  
        p_identification_number,  
        p_contact_number,  
        p_emergency_contact,  
        p_address,  
        p_birth_date,  
        p_gender,  
        p_blood_type  
    );  
  
END Insert_Patient;  
  
PROCEDURE Update_Patient(  
    p_patient_id IN NUMBER,  
    p_patient_name IN VARCHAR2,  
    p_patient_surname IN VARCHAR2,  
    p_identification_number IN VARCHAR2,  
    p_contact_number IN VARCHAR2,  
    p_emergency_contact IN VARCHAR2,  
    p_address IN VARCHAR2,  
    p_birth_date IN DATE,  
    p_gender IN VARCHAR2,  
    p_blood_type IN VARCHAR2  
) IS BEGIN  
UPDATE  
    Patient  
SET  
    PatientName = p_patient_name,  
    PatientSurname = p_patient_surname,  
    Identification_Number = p_identification_number,  
    Contact_Number = p_contact_number,  
    EmergencyContact = p_emergency_contact,  
    Address = p_address,  
    Birth_Date = p_birth_date,  
    Gender = p_gender,  
    Blood_Type = p_blood_type  
WHERE  
    PatientId = p_patient_id;  
  
END Update_Patient;  
  
PROCEDURE Delete_Patient(p_patient_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Patient  
WHERE  
    PatientId = p_patient_id;  
  
END Delete_Patient;  
  
PROCEDURE Insert_Insurance(  
    p_policy_id IN VARCHAR2,  
    p_insurance_name IN VARCHAR2,  
    p_patient_id IN NUMBER,  
    p_coverage_limit IN NUMBER,  
    p_policy_end_date IN DATE,  
    p_coverage_type IN VARCHAR2  
) IS BEGIN  
INSERT INTO  
    Insurance (  
        PolicyId,  
        InsuranceName,  
        PatientId,  
        CoverageLimit,  
        PolicyEndDate,  
        CoverageType  
    )  
VALUES  
    (  
        p_policy_id,  
        p_insurance_name,  
        p_patient_id,  
        p_coverage_limit,  
        p_policy_end_date,  
        p_coverage_type  
    );  
  
END Insert_Insurance;  
  
PROCEDURE Update_Insurance(  
    p_insurance_id IN NUMBER,  
    p_policy_id IN VARCHAR2,  
    p_insurance_name IN VARCHAR2,  
    p_patient_id IN NUMBER,  
    p_coverage_limit IN NUMBER,  
    p_policy_end_date IN DATE,  
    p_coverage_type IN VARCHAR2  
) IS BEGIN  
UPDATE  
    Insurance  
SET  
    PolicyId = p_policy_id,  
    InsuranceName = p_insurance_name,  
    PatientId = p_patient_id,  
    CoverageLimit = p_coverage_limit,  
    PolicyEndDate = p_policy_end_date,  
    CoverageType = p_coverage_type  
WHERE  
    InsuranceId = p_insurance_id;  
  
END Update_Insurance;  
  
PROCEDURE Delete_Insurance(p_insurance_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Insurance  
WHERE  
    InsuranceId = p_insurance_id;  
  
END Delete_Insurance;  
  
PROCEDURE Insert_TestReport(  
    p_report_details IN VARCHAR2, 
    p_patient_id IN NUMBER 
) IS BEGIN  
INSERT INTO  
    TestReport (ReportDetails, PatientId)  
VALUES  
    (p_report_details, p_patient_id);  
  
END Insert_TestReport;  
  
PROCEDURE Update_TestReport(  
    p_report_id IN NUMBER,  
    p_report_details IN VARCHAR2, 
    p_patient_id IN NUMBER 
) IS BEGIN  
UPDATE  
    TestReport  
SET  
    ReportDetails = p_report_details, 
    PatientId = p_patient_id 
WHERE  
    ReportId = p_report_id;  
  
END Update_TestReport;  
  
PROCEDURE Delete_TestReport(p_report_id IN NUMBER) IS BEGIN  
DELETE FROM  
    TestReport  
WHERE  
    ReportId = p_report_id;  
  
END Delete_TestReport;  
  
PROCEDURE Insert_Prescription(  
    p_field IN VARCHAR2,  
    p_drugdetails IN VARCHAR2,  
    p_prescription_date IN DATE, 
    p_patient_id IN NUMBER 
) IS BEGIN  
INSERT INTO  
    Prescription (  
        Field,  
        DrugDetails,  
        PrescriptionDate,  
        PatientId 
    )  
VALUES  
    (  
        p_field,  
        p_drugdetails,  
        p_prescription_date, 
        p_patient_id 
    );  
  
END Insert_Prescription;  
  
PROCEDURE Update_Prescription(  
    p_prescription_id IN NUMBER,  
    p_field IN VARCHAR2,  
    p_drugdetails IN VARCHAR2,  
    p_prescription_date IN DATE, 
    p_patient_id IN NUMBER 
) IS BEGIN  
UPDATE  
    Prescription  
SET  
    Field = p_field,  
    DrugDetails = p_drugdetails,  
    PrescriptionDate = p_prescription_date, 
    PatientId = p_patient_id 
WHERE  
    PrescriptionId = p_prescription_id;  
  
END Update_Prescription;  
  
PROCEDURE Delete_Prescription(p_prescription_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Prescription  
WHERE  
    PrescriptionId = p_prescription_id;  
  
END Delete_Prescription;  
  
PROCEDURE Insert_Discharge(  
    p_discharge_date IN DATE,  
    p_discharge_reason IN VARCHAR2,  
    p_bill_id IN NUMBER, 
    p_patient_id IN NUMBER 
) IS BEGIN  
INSERT INTO  
    Discharge (  
        DischargeDate,  
        DischargeReason,  
        BillId, 
        PatientId 
    )  
VALUES  
    (  
        p_discharge_date,  
        p_discharge_reason,  
        p_bill_id, 
        p_patient_id 
    );  
  
END Insert_Discharge;  
  
PROCEDURE Update_Discharge(  
    p_discharge_id IN NUMBER,  
    p_discharge_date IN DATE,  
    p_discharge_reason IN VARCHAR2,  
    p_bill_id IN NUMBER,  
    p_patient_id IN NUMBER 
) IS BEGIN  
UPDATE  
    Discharge  
SET  
    DischargeDate = p_discharge_date,  
    DischargeReason = p_discharge_reason,  
    BillId = p_bill_id, 
    PatientId = p_patient_id 
WHERE  
    DischargeId = p_discharge_id;  
  
END Update_Discharge;  
  
PROCEDURE Delete_Discharge(p_discharge_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Discharge  
WHERE  
    DischargeId = p_discharge_id;  
  
END Delete_Discharge;  
  
PROCEDURE Insert_Bill(  
    p_insurance_id IN NUMBER,  
    p_final_bill IN NUMBER,  
    p_payment_status IN VARCHAR2,  
    p_payment_date IN DATE, 
    p_patient_id IN NUMBER 
) IS   
BEGIN  
    INSERT INTO Bill (  
        InsuranceId,  
        FinalBill,  
        PaymentStatus,  
        PaymentDate,  
        PatientId 
    )  
    VALUES (  
        p_insurance_id,  
        p_final_bill,  
        p_payment_status,  
        p_payment_date, 
        p_patient_id 
    );  
END Insert_Bill;  
  
  
PROCEDURE Update_Bill(  
    p_bill_id IN NUMBER,  
    p_insurance_id IN NUMBER,  
    p_final_bill IN NUMBER,  
    p_payment_status IN VARCHAR2,  
    p_payment_date IN DATE, 
    p_patient_id IN NUMBER 
) IS BEGIN  
UPDATE  
    Bill  
SET  
    InsuranceId = p_insurance_id,  
    FinalBill = p_final_bill,  
    PaymentStatus = p_payment_status,  
    PaymentDate = p_payment_date, 
    PatientId = p_patient_id 
WHERE  
    BillId = p_bill_id;  
  
END Update_Bill;  
  
PROCEDURE Delete_Bill(p_bill_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Bill  
WHERE  
    BillId = p_bill_id;  
  
END Delete_Bill;  
  
PROCEDURE Insert_Record(  
    p_doctor_id IN NUMBER, 
    p_room_id IN NUMBER, 
    p_record_details IN VARCHAR2 
) IS BEGIN  
INSERT INTO  
    Records (DoctorId, RoomId, RecordDetails)  
VALUES  
    (p_doctor_id, p_room_id, p_record_details);  
  
END Insert_Record;  
  
PROCEDURE Update_Record(  
    p_record_id IN NUMBER, 
    p_doctor_id IN NUMBER, 
    p_room_id IN NUMBER, 
    p_record_details IN VARCHAR2 
) IS BEGIN  
UPDATE  
    Records  
SET  
    DoctorId = p_doctor_id, 
    RoomId = p_room_id, 
    RecordDetails = p_record_details 
WHERE  
    RecordId = p_record_id;  
  
END Update_Record;  
  
PROCEDURE Delete_Record(p_record_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Records  
WHERE  
    RecordId = p_record_id;  
  
END Delete_Record;  
  
PROCEDURE Insert_Appointment(  
    p_patient_id IN NUMBER,  
    p_appointment_date IN DATE,  
    p_appointment_time IN TIMESTAMP,  
    p_department_id IN NUMBER  
) IS BEGIN  
INSERT INTO  
    Appointment (  
        PatientId,  
        AppointmentDate,  
        AppointmentTime,  
        DepartmentId  
    )  
VALUES  
    (  
        p_patient_id,  
        p_appointment_date,  
        p_appointment_time,  
        p_department_id  
    );  
  
END Insert_Appointment;  
  
PROCEDURE Update_Appointment(  
    p_appointment_id IN NUMBER,  
    p_patient_id IN NUMBER,  
    p_appointment_date IN DATE,  
    p_appointment_time IN TIMESTAMP,  
    p_department_id IN NUMBER  
) IS BEGIN  
UPDATE  
    Appointment  
SET  
    PatientId = p_patient_id,  
    AppointmentDate = p_appointment_date,  
    AppointmentTime = p_appointment_time,  
    DepartmentId = p_department_id  
WHERE  
    AppointmentId = p_appointment_id;  
  
END Update_Appointment;  
  
PROCEDURE Delete_Appointment(p_appointment_id IN NUMBER) IS BEGIN  
DELETE FROM  
    Appointment  
WHERE  
    AppointmentId = p_appointment_id;  
  
END Delete_Appointment;  
  
END Hospital_Management_Pkg;  
  
/

INSERT INTO Department (DepartmentName) VALUES ('Cardiology');

INSERT INTO Department (DepartmentName) VALUES ('Radiology');

INSERT INTO Department (DepartmentName) VALUES ('Neurology');

INSERT INTO Department (DepartmentName) VALUES ('Oncology');

INSERT INTO Department (DepartmentName) VALUES ('Pediatrics');

INSERT INTO Department (DepartmentName) VALUES ('Orthopedics');

INSERT INTO Department (DepartmentName) VALUES ('Emergency');

INSERT INTO Department (DepartmentName) VALUES ('Surgery');

INSERT INTO Department (DepartmentName) VALUES ('Dermatology');

INSERT INTO Department (DepartmentName) VALUES ('Psychiatry');

SELECT * FROM Department;

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (1, 'ICU', 10);

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (2, 'General', 20);

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (3, 'Private', 5);

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (4, 'Emergency', 8);

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (5, 'Recovery', 12);

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (6, 'Operating', 15);

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (7, 'Observation', 10);

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (8, 'Isolation', 4);

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (9, 'Pediatrics', 6);

INSERT INTO Room (DepartmentId, RoomType, Capacity) VALUES (10, 'General', 18);

SELECT * FROM Room;

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('John', 'Doe', 'Nurse', 1);

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('Jane', 'Smith', 'Doctor', 2);

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('Mark', 'Taylor', 'Receptionist', 3);

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('Emily', 'Davis', 'Nurse', 4);

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('Michael', 'Brown', 'Doctor', 5);

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('Sarah', 'Wilson', 'Receptionist', 6);

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('Chris', 'Evans', 'Nurse', 7);

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('Anna', 'Johnson', 'Doctor', 8);

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('David', 'Lee', 'Nurse', 9);

INSERT INTO Employee (EmployeeName, EmployeeSurname, Role, DepartmentId) VALUES ('Sophia', 'Clark', 'Receptionist', 10);

SELECT * FROM Employee;

INSERT INTO Doctor (DoctorName, DoctorSurname, Specialty, DoctorPhone, EmployeeId) VALUES ('Emily', 'Clark', 'Cardiology', '5551010805', 1);

INSERT INTO Doctor (DoctorName, DoctorSurname, Specialty, DoctorPhone, EmployeeId) VALUES ('Michael', 'Scott', 'Neurology', '5322020101', 2);

INSERT INTO Doctor (DoctorName, DoctorSurname, Specialty, DoctorPhone, EmployeeId) VALUES ('Sarah', 'Connor', 'Orthopedics', '5342113030', 3);

INSERT INTO Doctor (DoctorName, DoctorSurname, Specialty, DoctorPhone, EmployeeId) VALUES ('James', 'Bond', 'Pediatrics', '5326789453', 4);

INSERT INTO Doctor (DoctorName, DoctorSurname, Specialty, DoctorPhone, EmployeeId) VALUES ('Olivia', 'Adams', 'Surgery', '5423997483', 5);

SELECT * FROM Doctor;

INSERT INTO Patient (PatientName, PatientSurname, Identification_Number, Contact_Number, EmergencyContact, Address, Birth_Date, Gender, Blood_Type)  
VALUES ('John', 'Doe', '1234567890', '5323455656', 'Jane Doe', 'Apple St', TO_DATE('1985-03-15', 'YYYY-MM-DD'), 'Male', 'O+');

INSERT INTO Patient (PatientName, PatientSurname, Identification_Number, Contact_Number, EmergencyContact, Address, Birth_Date, Gender, Blood_Type)  
VALUES ('Mary', 'Smith', '2345678901', '5388768767', 'Tom Smith', 'Acıbadem St', TO_DATE('1990-07-22', 'YYYY-MM-DD'), 'Female', 'A-');

INSERT INTO Patient (PatientName, PatientSurname, Identification_Number, Contact_Number, EmergencyContact, Address, Birth_Date, Gender, Blood_Type)  
VALUES ('Robert', 'Brown', '3456789012', '535456756', 'Lucy Brown', 'Suadiye St', TO_DATE('1975-11-02', 'YYYY-MM-DD'), 'Male', 'B+');

INSERT INTO Patient (PatientName, PatientSurname, Identification_Number, Contact_Number, EmergencyContact, Address, Birth_Date, Gender, Blood_Type)  
VALUES ('Jessica', 'Johnson', '4567890123', '5554445596', 'Mark Johnson', 'Maslak St', TO_DATE('1988-06-10', 'YYYY-MM-DD'), 'Female', 'AB+');

INSERT INTO Insurance (PolicyId, InsuranceName, PatientId, CoverageLimit, PolicyEndDate, CoverageType)  
VALUES ('123', 'Axa', 1, 50000, TO_DATE('2025-12-31', 'YYYY-MM-DD'), 'Full');

INSERT INTO Insurance (PolicyId, InsuranceName, PatientId, CoverageLimit, PolicyEndDate, CoverageType)  
VALUES ('124', 'Mapfre', 2, 30000, TO_DATE('2024-06-30', 'YYYY-MM-DD'), 'Complementary');

INSERT INTO Insurance (PolicyId, InsuranceName, PatientId, CoverageLimit, PolicyEndDate, CoverageType)  
VALUES ('125', 'Allianz', 3, 40000, TO_DATE('2026-01-15', 'YYYY-MM-DD'), 'Full');

INSERT INTO Insurance (PolicyId, InsuranceName, PatientId, CoverageLimit, PolicyEndDate, CoverageType)  
VALUES ('126', 'Acibadem', 4, 35000, TO_DATE('2023-09-20', 'YYYY-MM-DD'), 'Complementary');

SELECT * FROM Insurance;

SELECT * FROM Employee;

INSERT INTO Patient (PatientName, PatientSurname, Identification_Number, Contact_number, EmergencyContact, Address, Birth_Date, Gender, Blood_Type) VALUES ('Isabella', 'Walsh', '12345678901', '5551234567', '5559876543', 'Elm Street, Springfield', TO_DATE('1985-05-12', 'YYYY-MM-DD'), 'Male', 'O+');

INSERT INTO Patient (PatientName, PatientSurname, Identification_Number, Contact_number, EmergencyContact, Address, Birth_Date, Gender, Blood_Type) VALUES ('Poppy', 'Davis', '98765432109', '5552345678', '5558765432', 'Oak Avenue, Metropolis', TO_DATE('1992-11-23', 'YYYY-MM-DD'), 'Female', 'A-');

INSERT INTO Patient (PatientName, PatientSurname, Identification_Number, Contact_number, EmergencyContact, Address, Birth_Date, Gender, Blood_Type) VALUES ('Jennifer', 'Roberts', '56473829103', '5553456789', '5557654321', 'Akasya Lane, Gotham', TO_DATE('1978-08-19', 'YYYY-MM-DD'), 'Female', 'B+');

INSERT INTO Patient (PatientName, PatientSurname, Identification_Number, Contact_number, EmergencyContact, Address, Birth_Date, Gender, Blood_Type) VALUES ('George', 'Taylor', '10293847561', '5554567890', '5556543210', 'Madame Road, Star City', TO_DATE('1965-03-14', 'YYYY-MM-DD'), 'Male', 'AB-');

SELECT * FROM Patient;

INSERT INTO TestReport (ReportDetails, PatientId) VALUES ('Complete Blood Count (CBC): Normal ranges for all parameters.', 5);

INSERT INTO TestReport (ReportDetails, PatientId) VALUES ('X-Ray Chest: No abnormalities detected.', 6);

INSERT INTO TestReport (ReportDetails, PatientId) VALUES ('MRI Brain: No evidence of infarction or mass lesion.', 3);

INSERT INTO TestReport (ReportDetails, PatientId) VALUES ('Liver Function Test: Elevated ALT and AST levels.', 2);

SELECT * FROM TestReport;

INSERT INTO Prescription (PrescriptionId, Field, DrugDetails, PrescriptionDate, PatientId) VALUES (1, 'Cardiology', 'Aspirin 75mg once daily', TO_DATE('2024-12-01', 'YYYY-MM-DD'), 5);

INSERT INTO Prescription (PrescriptionId, Field, DrugDetails, PrescriptionDate, PatientId) VALUES (2, 'Neurology', 'Parol 300mg twice daily', TO_DATE('2024-12-02', 'YYYY-MM-DD'), 3);

INSERT INTO Prescription (PrescriptionId, Field, DrugDetails, PrescriptionDate, PatientId) VALUES (3, 'Orthopedics', 'Ibuprofen 400mg three times daily', TO_DATE('2024-12-03', 'YYYY-MM-DD'), 4);

SELECT * FROM Prescription;

SELECT * FROM Insurance;

INSERT INTO Bill (InsuranceId, FinalBill, PaymentStatus, PaymentDate, PatientId) VALUES (1, 1500.00, 'Paid', TO_DATE('2024-12-01', 'YYYY-MM-DD'), 8);

INSERT INTO Bill (InsuranceId, FinalBill, PaymentStatus, PaymentDate, PatientId) VALUES (2, 2750.50, 'Unpaid', NULL, 7);

INSERT INTO Bill (InsuranceId, FinalBill, PaymentStatus, PaymentDate, PatientId) VALUES (3, 3200.00, 'Paid', TO_DATE('2024-12-02', 'YYYY-MM-DD'), 5);

INSERT INTO Bill (InsuranceId, FinalBill, PaymentStatus, PaymentDate, PatientId) VALUES (4, 4500.25, 'Partially Paid', TO_DATE('2024-12-03', 'YYYY-MM-DD'), 1);

SELECT * FROM Bill;

SELECT * FROM Employee;

SELECT * FROM Patient;

SELECT * FROM Department;

INSERT INTO Appointment (PatientId, AppointmentDate, AppointmentTime, DepartmentId)   
VALUES (1, TO_DATE('2024-12-06', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-12-06 09:30:00', 'YYYY-MM-DD HH24:MI:SS'), 4);

INSERT INTO Appointment (PatientId, AppointmentDate, AppointmentTime, DepartmentId)   
VALUES (2, TO_DATE('2024-12-07', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-12-07 11:00:00', 'YYYY-MM-DD HH24:MI:SS'), 6);

INSERT INTO Appointment (PatientId, AppointmentDate, AppointmentTime, DepartmentId)   
VALUES (3, TO_DATE('2024-12-08', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-12-08 14:30:00', 'YYYY-MM-DD HH24:MI:SS'), 2);

INSERT INTO Appointment (PatientId, AppointmentDate, AppointmentTime, DepartmentId)   
VALUES (4, TO_DATE('2024-12-09', 'YYYY-MM-DD'), TO_TIMESTAMP('2024-12-09 10:15:00', 'YYYY-MM-DD HH24:MI:SS'), 8);

SELECT * FROM Appointment;

SELECT * FROM Bill;

INSERT INTO Discharge (DischargeDate, DischargeReason, BillId, PatientId) VALUES (TO_DATE('2024-12-05', 'YYYY-MM-DD'), 'Completed treatment', 4, 4);

INSERT INTO Discharge (DischargeDate, DischargeReason, BillId, PatientId) VALUES (TO_DATE('2024-12-06', 'YYYY-MM-DD'), 'Patient request', 1, 5);

INSERT INTO Discharge (DischargeDate, DischargeReason, BillId, PatientId) VALUES (TO_DATE('2024-12-07', 'YYYY-MM-DD'), 'Medical advice', 2, 8);

INSERT INTO Discharge (DischargeDate, DischargeReason, BillId, PatientId) VALUES (TO_DATE('2024-12-08', 'YYYY-MM-DD'), 'Treatment completed', 3, 7);

SELECT * FROM Discharge;

UPDATE Department   
SET DepartmentName = 'Advanced Cardiology'   
WHERE DepartmentId = 1;

UPDATE Department   
SET DepartmentName = 'Pediatric Neurology'  
WHERE DepartmentId = 2;

SELECT * FROM Department;

UPDATE Room  
SET RoomType = 'Deluxe ICU', Capacity = 6  
WHERE RoomId = 1;

UPDATE Room  
SET RoomType = 'Semi-Private', Capacity = 12  
WHERE RoomId = 2;

SELECT * FROM Room;

UPDATE Employee  
SET EmployeeName = 'Jonathan', EmployeeSurname = 'Doe', Role = 'Senior Doctor'  
WHERE EmployeeId = 1;

UPDATE Employee  
SET Role = 'Head Nurse'  
WHERE EmployeeId = 2;

SELECT * FROM Employee;

UPDATE Doctor  
SET Specialty = 'Interventional Cardiology', DoctorPhone = '5553214567'  
WHERE DoctorId = 1;

UPDATE Doctor  
SET DoctorSurname = 'Williams', DoctorPhone = '5556549870'  
WHERE DoctorId = 2;

UPDATE Doctor  
SET Specialty = 'Interventional Cardiology', DoctorPhone = '5553214567'  
WHERE DoctorId = 1;

UPDATE Doctor  
SET DoctorSurname = 'Williams', DoctorPhone;

CREATE OR REPLACE PROCEDURE Generate_Report( 
    p_table_name IN VARCHAR2, 
    p_where_clause IN VARCHAR2, 
    p_result OUT SYS_REFCURSOR 
) IS 
    v_query VARCHAR2(4000); 
BEGIN 
    -- Dinamik sorguyu oluştur 
    v_query := 'SELECT * FROM ' || p_table_name || ' WHERE ' || p_where_clause; 
     
    -- Sorguyu çalıştır ve sonuçları cursor ile döndür 
    OPEN p_result FOR v_query; 
END Generate_Report; 
/

DECLARE 
    v_query   VARCHAR2(4000); 
    v_filter  VARCHAR2(200); 
    v_results SYS_REFCURSOR; 
    v_department_name Department.DepartmentName%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE DepartmentName LIKE :department_name'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT DepartmentName FROM Department ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING '%Cardiology%'; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_department_name; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE('Department: ' || v_department_name); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query   VARCHAR2(4000); 
    v_filter  VARCHAR2(200); 
    v_results SYS_REFCURSOR; 
    v_room_type Room.RoomType%TYPE; 
    v_capacity Room.Capacity%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE Capacity >= :capacity'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT RoomType, Capacity FROM Room ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING 10; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_room_type, v_capacity; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE('Room Type: ' || v_room_type || ', Capacity: ' || v_capacity); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query   VARCHAR2(4000); 
    v_filter  VARCHAR2(200); 
    v_results SYS_REFCURSOR; 
    v_name Employee.EmployeeName%TYPE; 
    v_surname Employee.EmployeeSurname%TYPE; 
    v_role Employee.Role%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE Role = :role'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT EmployeeName, EmployeeSurname, Role FROM Employee ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING 'Nurse'; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_name, v_surname, v_role; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE('Employee: ' || v_name || ' ' || v_surname || ', Role: ' || v_role); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query   VARCHAR2(4000); 
    v_filter  VARCHAR2(200); 
    v_results SYS_REFCURSOR; 
    v_name Doctor.DoctorName%TYPE; 
    v_surname Doctor.DoctorSurname%TYPE; 
    v_specialty Doctor.Specialty%TYPE; 
    v_phone Doctor.DoctorPhone%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE Specialty LIKE :specialty'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT DoctorName, DoctorSurname, Specialty, DoctorPhone FROM Doctor ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING '%Cardiology%'; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_name, v_surname, v_specialty, v_phone; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE('Doctor: ' || v_name || ' ' || v_surname || ', Specialty: ' || v_specialty || ', Phone: ' || v_phone); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query   VARCHAR2(4000); 
    v_filter  VARCHAR2(200); 
    v_results SYS_REFCURSOR; 
    v_name Patient.PatientName%TYPE; 
    v_surname Patient.PatientSurname%TYPE; 
    v_contact Patient.Contact_Number%TYPE; 
    v_blood_type Patient.Blood_Type%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE Blood_Type = :blood_type'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT PatientName, PatientSurname, Contact_Number, Blood_Type FROM Patient ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING 'O+'; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_name, v_surname, v_contact, v_blood_type; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE('Patient: ' || v_name || ' ' || v_surname || ', Contact: ' || v_contact || ', Blood Type: ' || v_blood_type); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query   VARCHAR2(4000); 
    v_filter  VARCHAR2(200); 
    v_results SYS_REFCURSOR; 
    v_insurance_name Insurance.InsuranceName%TYPE; 
    v_coverage_limit Insurance.CoverageLimit%TYPE; 
    v_policy_id Insurance.PolicyId%TYPE; 
    v_patient_id Insurance.PatientId%TYPE; 
    v_policy_end_date Insurance.PolicyEndDate%TYPE; 
    v_coverage_type Insurance.CoverageType%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE TO_NUMBER(CoverageLimit) >= :limit'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT InsuranceName, CoverageLimit, PolicyId, PatientId, PolicyEndDate, CoverageType FROM Insurance ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING 40000; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_insurance_name, v_coverage_limit, v_policy_id, v_patient_id, v_policy_end_date, v_coverage_type; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE( 
            'Insurance: ' || v_insurance_name ||  
            ', Coverage Limit: ' || v_coverage_limit ||  
            ', Policy ID: ' || v_policy_id ||  
            ', Patient ID: ' || v_patient_id ||  
            ', Policy End Date: ' || TO_CHAR(v_policy_end_date, 'YYYY-MM-DD') ||  
            ', Coverage Type: ' || v_coverage_type 
        ); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query   VARCHAR2(4000); 
    v_filter  VARCHAR2(200); 
    v_results SYS_REFCURSOR; 
    v_report_details TestReport.ReportDetails%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE ReportDetails LIKE :report_keyword'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT ReportDetails FROM TestReport ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING '%MRI%'; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_report_details; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE('Test Report: ' || v_report_details); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query   VARCHAR2(4000); 
    v_filter  VARCHAR2(200); 
    v_results SYS_REFCURSOR; 
    v_patient_id Appointment.PatientId%TYPE; 
    v_appointment_date Appointment.AppointmentDate%TYPE; 
    v_appointment_time Appointment.AppointmentTime%TYPE; 
    v_department_id Appointment.DepartmentId%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE AppointmentDate >= :start_date'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT PatientId, AppointmentDate, AppointmentTime, DepartmentId FROM Appointment ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING TO_DATE('2024-12-01', 'YYYY-MM-DD'); 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_patient_id, v_appointment_date, v_appointment_time, v_department_id; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE( 
            'Patient ID: ' || v_patient_id ||  
            ', Appointment Date: ' || TO_CHAR(v_appointment_date, 'YYYY-MM-DD') ||  
            ', Appointment Time: ' || TO_CHAR(v_appointment_time, 'HH24:MI:SS') ||  
            ', Department ID: ' || v_department_id 
        ); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query         VARCHAR2(4000); 
    v_filter        VARCHAR2(200); 
    v_results       SYS_REFCURSOR; 
    v_prescription_id Prescription.PrescriptionId%TYPE; 
    v_field         Prescription.Field%TYPE; 
    v_drug_details  Prescription.DrugDetails%TYPE; 
    v_prescription_date Prescription.PrescriptionDate%TYPE; 
    v_patient_id    Prescription.PatientId%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE Field LIKE :field'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT PrescriptionId, Field, DrugDetails, PrescriptionDate, PatientId FROM Prescription ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING '%Cardiology%'; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_prescription_id, v_field, v_drug_details, v_prescription_date, v_patient_id; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE( 
            'Prescription ID: ' || v_prescription_id ||  
            ', Field: ' || v_field ||  
            ', Drug Details: ' || v_drug_details ||  
            ', Prescription Date: ' || TO_CHAR(v_prescription_date, 'YYYY-MM-DD') ||  
            ', Patient ID: ' || v_patient_id 
        ); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query         VARCHAR2(4000); 
    v_filter        VARCHAR2(200); 
    v_results       SYS_REFCURSOR; 
    v_bill_id       Bill.BillId%TYPE; 
    v_insurance_id  Bill.InsuranceId%TYPE; 
    v_final_bill    Bill.FinalBill%TYPE; 
    v_payment_status Bill.PaymentStatus%TYPE; 
    v_payment_date  Bill.PaymentDate%TYPE; 
    v_patient_id    Bill.PatientId%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE FinalBill > :min_amount'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT BillId, InsuranceId, FinalBill, PaymentStatus, PaymentDate, PatientId FROM Bill ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING 1000; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_bill_id, v_insurance_id, v_final_bill, v_payment_status, v_payment_date, v_patient_id; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE( 
            'Bill ID: ' || v_bill_id ||  
            ', Insurance ID: ' || v_insurance_id ||  
            ', Final Bill: ' || v_final_bill ||  
            ', Payment Status: ' || v_payment_status ||  
            ', Payment Date: ' || TO_CHAR(v_payment_date, 'YYYY-MM-DD') ||  
            ', Patient ID: ' || v_patient_id 
        ); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query         VARCHAR2(4000); 
    v_filter        VARCHAR2(200); 
    v_results       SYS_REFCURSOR; 
    v_discharge_id  Discharge.DischargeId%TYPE; 
    v_discharge_date Discharge.DischargeDate%TYPE; 
    v_discharge_reason Discharge.DischargeReason%TYPE; 
    v_bill_id       Discharge.BillId%TYPE; 
    v_patient_id    Discharge.PatientId%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE DischargeDate BETWEEN :start_date AND :end_date'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT DischargeId, DischargeDate, DischargeReason, BillId, PatientId FROM Discharge ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING TO_DATE('2024-12-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'); 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_discharge_id, v_discharge_date, v_discharge_reason, v_bill_id, v_patient_id; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE( 
            'Discharge ID: ' 

/

DECLARE 
    v_query         VARCHAR2(4000); 
    v_filter        VARCHAR2(200); 
    v_results       SYS_REFCURSOR; 
    v_discharge_id  Discharge.DischargeId%TYPE; 
    v_discharge_date Discharge.DischargeDate%TYPE; 
    v_discharge_reason Discharge.DischargeReason%TYPE; 
    v_bill_id       Discharge.BillId%TYPE; 
    v_patient_id    Discharge.PatientId%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE DischargeDate BETWEEN :start_date AND :end_date'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT DischargeId, DischargeDate, DischargeReason, BillId, PatientId FROM Discharge ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING TO_DATE('2024-12-01', 'YYYY-MM-DD'), TO_DATE('2024-12-31', 'YYYY-MM-DD'); 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_discharge_id, v_discharge_date, v_discharge_reason, v_bill_id, v_patient_id; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE( 
            'Discharge ID: ' || v_discharge_id ||  
            ', Discharge Date: ' || TO_CHAR(v_discharge_date, 'YYYY-MM-DD') ||  
            ', Reason: ' || v_discharge_reason ||  
            ', Bill ID: ' || v_bill_id ||  
            ', Patient ID: ' || v_patient_id 
        ); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query         VARCHAR2(4000); 
    v_filter        VARCHAR2(200); 
    v_results       SYS_REFCURSOR; 
    v_record_id     Records.RecordId%TYPE; 
    v_doctor_id     Records.DoctorId%TYPE; 
    v_room_id       Records.RoomId%TYPE; 
    v_record_details Records.RecordDetails%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE DoctorId = :doctor_id'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT RecordId, DoctorId, RoomId, RecordDetails FROM Records ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING 1; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_record_id, v_doctor_id, v_room_id, v_record_details; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE( 
            'Record ID: ' || v_record_id ||  
            ', Doctor ID: ' || v_doctor_id ||  
            ', Room ID: ' || v_room_id ||  
            ', Details: ' || v_record_details 
        ); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

DECLARE 
    v_query         VARCHAR2(4000); 
    v_filter        VARCHAR2(200); 
    v_results       SYS_REFCURSOR; 
    v_record_id     Records.RecordId%TYPE; 
    v_doctor_id     Records.DoctorId%TYPE; 
    v_room_id       Records.RoomId%TYPE; 
    v_record_details Records.RecordDetails%TYPE; 
BEGIN 
    -- Dinamik filtre 
    v_filter := 'WHERE DoctorId = :doctor_id'; 
 
    -- Sorgu oluştur 
    v_query := 'SELECT RecordId, DoctorId, RoomId, RecordDetails FROM Records ' || v_filter; 
 
    -- Sorguyu çalıştır 
    OPEN v_results FOR v_query 
        USING 1; 
 
    -- Sonuçları yazdır 
    LOOP 
        FETCH v_results INTO v_record_id, v_doctor_id, v_room_id, v_record_details; 
        EXIT WHEN v_results%NOTFOUND; 
 
        DBMS_OUTPUT.PUT_LINE( 
            'Record ID: ' || v_record_id ||  
            ', Doctor ID: ' || v_doctor_id ||  
            ', Room ID: ' || v_room_id ||  
            ', Details: ' || v_record_details 
        ); 
    END LOOP; 
 
    CLOSE v_results; 
END; 
/

